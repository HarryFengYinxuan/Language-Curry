module LangParser where

import Lang
import ParserMonad
import EnvUnsafe

-- you will need to write a parser in LangParser.hs

-- you may want to structure you grammar like this:

keywords = ["if","then","else", "let", "in", "true","false"]

vars :: Parser Ast
vars = do s <- token $ varParser
          if s `elem` keywords
          then failParse
          else return $ Var s

ints :: Parser Ast
ints = token intParser
                `mapParser` (\ i -> ValInt i)

bools :: Parser Ast
bools = do s <- token $ varParser
           case s of 
           	"true" -> return $ ValBool True
           	"false" -> return $ ValBool False
           	_ -> failParse

nil :: Parser Ast
nil = do token $ literal "["
         token $ literal "]"
         return Nil

apps :: Parser Ast
apps = withInfix consParser [("",App)] -- the tokens eat up all the spaces so we split on the empty string

cons :: Parser Ast
cons = do a <- orExpr
          (do token (literal ":")
              b <- consParser
              return (Cons a b)) <|> return a

consParser :: Parser Ast
consParser = cons <|> orExpr 
-- *LangParser> parse cons "1 : 4: true"
-- Just (1 : 4 : true,"")


orExpr :: Parser Ast
orExpr = withInfix andExpr [("||", Or)]

-- *LangParser> parse orExpr "true || false && 7"
-- Just (true || false && 7,"")
-- *LangParser> parse orExpr "true || false || 7"
-- Just (true || false || 7,"")
-- *LangParser> parse orExpr "true"
-- Just (true,"")

andExpr :: Parser Ast
andExpr = withInfix addSubExpr [("&&", And)]

-- *LangParser> parse andExpr "false"
-- Just (false,"")
-- *LangParser> parse andExpr "false && false"
-- Just (false && false,"")

addSubExpr :: Parser Ast
addSubExpr = withInfix multDivExpr [("+", Plus), ("-", Minus)]

-- *LangParser> parse addSubExpr "1+2+3+4"
-- Just (1 + 2 + 3 + 4,"")
-- *LangParser> parse addSubExpr "1-2-3-4"
-- Just (1 - 2 - 3 - 4,"")

multDivExpr :: Parser Ast
multDivExpr = withInfix notExp [("*", Mult), ("/", Div)]

notExp :: Parser Ast
notExp = do token $ literal "!"
            x <- notExp
            return $ Not x

atoms:: Parser Ast
atoms = ints <|> bools <|>  nil <|> parens <|> ifParser <|> letParser <|>  lambdaParser <|> vars

-- *LangParser> parse atoms "111"
-- Just (111,"")
-- *LangParser> parse atoms "  true"
-- Just (true,"")

ifParser :: Parser Ast
ifParser = do token $ literal "if"
              b <- parser
              token $ literal "then"
              t <- parser
              token $ literal "else"
              e <- parser
              return (If b t e) 

letParser :: Parser Ast
letParser = do token $ literal "let"
               v <- token varParser
               token $ literal "="
               val <- parser
               token $ literal "in"
               bod <- parser
               let res = Let v val bod
               return res

-- *LangParser> parse letParser "let x=3 in x+x"
-- Just (let x = 3 in x + x,"")

lambdaParser :: Parser Ast
lambdaParser = do token $ literal "\\"
                  x <- token varParser
                  token $ literal "->"
                  bod <- parser
                  return (Lam x bod)

parens :: Parser Ast
parens = do token $ literal "("
            ast <- parser
            token $ literal ")"
            return ast

-- *LangParser> parse parser "(true)"
-- Just (true,"")
-- *LangParser> parse parser "let x = (if true and false then 3 else elsee) in x + x"
-- Just (let x = if true and false then 3 else elsee in x + x,"")

parser :: Parser Ast  
parser = apps <|> orExpr <|> andExpr <|> addSubExpr <|> multDivExpr <|> notExp <|> consParser <|> parens <|> atoms 
	-- notExp <|> multDivExpr <|> addSubExpr <|> andExpr <|> orExpr <|> cons <|> consParser <|> apps <|> parens

-- note that the parser must respect all the precedence and associativity rules expressed in the prettyShow function.
-- that means
-- ! binds more tightly than
-- * / which binds more tightly than
-- + - which binds more tightly than
-- && which binds more tightly than
-- || which binds more tightly than
-- : which binds more tightly than
-- {the application} which binds weakest of all

-- + - * / && || {the application} are left associative
-- : is right associative

-- we are mostly following the questionable c precedence rules


-- you may want to structure your grammar like this:
-- keywords = ["if", "then", "else", "let", "in", "true", "false"]




-- ungraded bonus: add additional pretty syntax for lists: [1,2,3,4]

-- for repl testing
data LangOut = ParseError | RuntimeError String | Result Val deriving Show

exec :: String -> LangOut
exec s = case (parse parser) s of
  Just (ast,"") -> case run ast of
                     Ok v -> Result v
                     Error e -> RuntimeError e
  _  -> ParseError